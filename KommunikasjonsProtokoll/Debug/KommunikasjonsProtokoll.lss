
KommunikasjonsProtokoll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd2  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089a  00000000  00000000  0000103a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007bd  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000026c  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b63  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	13 d0       	rcall	.+38     	; 0xac <main>
  86:	17 c0       	rjmp	.+46     	; 0xb6 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <spi_init_dac>:

// Klokke hastighet må korrigeres for raskere enn UART
void spi_init_dac()
{
	// Reset pins
	DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SCK));
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	87 7c       	andi	r24, 0xC7	; 199
  8e:	84 b9       	out	0x04, r24	; 4
	// Output
	DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SCK));
  90:	84 b1       	in	r24, 0x04	; 4
  92:	88 62       	ori	r24, 0x28	; 40
  94:	84 b9       	out	0x04, r24	; 4
	
	SPCR = ((1<<SPE)|	// ENABLE
  96:	81 e5       	ldi	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
			(1<<MSTR)|	//Master/slave sel
			(0<<SPR1)|(1<<SPR0)| // Spi clock rate -- SPI2X:0 = fosc/4, Spi2x:1 = fosc/2
			(0<<CPOL)|	// Clock polarity
			(0<<CPHA)); // Clock phase
			
	SPSR = (1<<SPI2X);  // Double Clock Rate
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8d bd       	out	0x2d, r24	; 45
  9e:	08 95       	ret

000000a0 <Port_Init>:
	
// INTERRUPT FUNCTION
ISR(USART0_UDRE_vect)
{
	// UDR0 = 'A'; data to send
}
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	84 b9       	out	0x04, r24	; 4
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	08 95       	ret

000000ac <main>:
	//cbuf.size = 10;
	//cbuf.buffer = &array;   //malloc(cbuf.size); // Malloc returns a pointer to allocated memory. or NULL if it fails. Takes memory from heap in runtime.
	//crc16 = 0xFFFF; // Start value of CRC16
	//
	
	spi_init_dac();		// SPI before Port init so that the SS is properly configured.
  ac:	ee df       	rcall	.-36     	; 0x8a <spi_init_dac>
	Port_Init();
  ae:	f8 df       	rcall	.-16     	; 0xa0 <Port_Init>
  b0:	80 e0       	ldi	r24, 0x00	; 0

	 //premade in atmel studio, ccitt update will update its values everytime the data is added.
	 //use http://www.sunshine2k.de/coding/javascript/crc/crc_js.html to test crc
	 
return 0;
}
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
