
KommunikasjonsProtokoll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000672  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800100  00800100  00000672  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e56  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b0  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000801  00000000  00000000  00002919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__vector_19>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 33       	cpi	r26, 0x3B	; 59
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	31 d0       	rcall	.+98     	; 0xe8 <main>
  86:	b9 c2       	rjmp	.+1394   	; 0x5fa <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <__vector_19>:
	} else if(pData->subComm_Counter == 1)
	{
		circular_buf_put(cbuf,pData, 0x34);
		pData->subComm_Counter = 0;
	}
}
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
  a8:	e0 e0       	ldi	r30, 0x00	; 0
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	84 81       	ldd	r24, Z+4	; 0x04
  ae:	95 81       	ldd	r25, Z+5	; 0x05
  b0:	a0 81       	ld	r26, Z
  b2:	b1 81       	ldd	r27, Z+1	; 0x01
  b4:	a8 0f       	add	r26, r24
  b6:	b9 1f       	adc	r27, r25
  b8:	2c 91       	ld	r18, X
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	66 81       	ldd	r22, Z+6	; 0x06
  be:	77 81       	ldd	r23, Z+7	; 0x07
  c0:	79 d2       	rcall	.+1266   	; 0x5b4 <__udivmodhi4>
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
  c6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	7f 91       	pop	r23
  d8:	6f 91       	pop	r22
  da:	5f 91       	pop	r21
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:

int main(void)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0x6>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x8>
  f0:	1f 92       	push	r1
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	// Struct defines
	cbuf.buffer = array;
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	cbuf.size = 51;
 102:	83 e3       	ldi	r24, 0x33	; 51
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_edata+0x7>
 10a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_edata+0x6>
	packet_data pData;
	pData.mainComm_Counter = 0;
 10e:	19 82       	std	Y+1, r1	; 0x01
	pData.subComm_Counter = 0;
 110:	1a 82       	std	Y+2, r1	; 0x02
	pData.maxMainComms = 5;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	8b 83       	std	Y+3, r24	; 0x03
	pData.crc16 = 0xFFFF; // INITIAL CRC word
 116:	ef ef       	ldi	r30, 0xFF	; 255
 118:	ff ef       	ldi	r31, 0xFF	; 255
 11a:	fd 83       	std	Y+5, r31	; 0x05
 11c:	ec 83       	std	Y+4, r30	; 0x04
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 11e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
 122:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
 126:	da 01       	movw	r26, r20
 128:	a8 5f       	subi	r26, 0xF8	; 248
 12a:	be 4f       	sbci	r27, 0xFE	; 254
 12c:	1a ea       	ldi	r17, 0xAA	; 170
 12e:	1c 93       	st	X, r17
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5f 4f       	sbci	r21, 0xFF	; 255
 134:	9a 01       	movw	r18, r20
 136:	a1 ea       	ldi	r26, 0xA1	; 161
 138:	b0 ea       	ldi	r27, 0xA0	; 160
 13a:	50 d2       	rcall	.+1184   	; 0x5dc <__umulhisi3>
 13c:	96 95       	lsr	r25
 13e:	87 95       	ror	r24
 140:	92 95       	swap	r25
 142:	82 95       	swap	r24
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	89 27       	eor	r24, r25
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	89 27       	eor	r24, r25
 14c:	63 e3       	ldi	r22, 0x33	; 51
 14e:	68 9f       	mul	r22, r24
 150:	90 01       	movw	r18, r0
 152:	69 9f       	mul	r22, r25
 154:	30 0d       	add	r19, r0
 156:	11 24       	eor	r1, r1
 158:	42 1b       	sub	r20, r18
 15a:	53 0b       	sbc	r21, r19
 15c:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <_edata+0x3>
 160:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 164:	29 81       	ldd	r18, Y+1	; 0x01
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	28 17       	cp	r18, r24
 170:	39 07       	cpc	r19, r25
 172:	a1 f0       	breq	.+40     	; 0x19c <main+0xb4>
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 174:	cf 01       	movw	r24, r30
 176:	81 27       	eor	r24, r17
 178:	08 2e       	mov	r0, r24
 17a:	82 95       	swap	r24
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	80 25       	eor	r24, r0
 180:	09 2e       	mov	r0, r25
 182:	98 2f       	mov	r25, r24
 184:	82 95       	swap	r24
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	08 26       	eor	r0, r24
 18a:	86 95       	lsr	r24
 18c:	98 27       	eor	r25, r24
 18e:	89 27       	eor	r24, r25
 190:	88 0f       	add	r24, r24
 192:	88 0f       	add	r24, r24
 194:	88 0f       	add	r24, r24
 196:	80 25       	eor	r24, r0
	{
		pData->crc16 = _crc_ccitt_update(pData->crc16, data);
 198:	9d 83       	std	Y+5, r25	; 0x05
 19a:	8c 83       	std	Y+4, r24	; 0x04
	DDRD = (1<<ADC_READ_2);
}
void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 19c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 1a0:	83 e3       	ldi	r24, 0x33	; 51
 1a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable transmitter */
	UCSR0B = (1<<TXEN0)|(1<<UDRIE0);
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	// STARTUP operations
	circular_buf_put(&cbuf,&pData,0xAA); // Initial value so bool full doesnt fuck up.
	USART_Init(MYUBRR);
	/* Replace with your application code */
	sei();
 1b2:	78 94       	sei
 1b4:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <_edata+0x4>
 1b8:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <_edata+0x5>
 1bc:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_edata+0x2>
 1c0:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_edata+0x3>
 1c4:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 1c8:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 1cc:	2c 81       	ldd	r18, Y+4	; 0x04
 1ce:	3d 81       	ldd	r19, Y+5	; 0x05
 1d0:	f7 01       	movw	r30, r14
 1d2:	31 96       	adiw	r30, 0x01	; 1
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 1d4:	84 e3       	ldi	r24, 0x34	; 52
 1d6:	58 2e       	mov	r5, r24
 1d8:	93 e3       	ldi	r25, 0x33	; 51
 1da:	69 2e       	mov	r6, r25
 1dc:	4d ec       	ldi	r20, 0xCD	; 205
 1de:	74 2e       	mov	r7, r20
 1e0:	5b e6       	ldi	r21, 0x6B	; 107
 1e2:	85 2e       	mov	r8, r21
 1e4:	60 e9       	ldi	r22, 0x90	; 144
 1e6:	96 2e       	mov	r9, r22
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 1e8:	cc 24       	eor	r12, r12
 1ea:	ca 94       	dec	r12
 1ec:	dc 2c       	mov	r13, r12
 1ee:	cf 01       	movw	r24, r30
 1f0:	b8 01       	movw	r22, r16
 1f2:	e0 d1       	rcall	.+960    	; 0x5b4 <__udivmodhi4>
 1f4:	8a 15       	cp	r24, r10
 1f6:	9b 05       	cpc	r25, r11
 1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x114>
 1fa:	83 c0       	rjmp	.+262    	; 0x302 <main+0x21a>
		if(circular_buf_full(cbuf))
		{
			// Do nothing when full
		}
		// PACKET FORMAT
		else if(pData.mainComm_Counter == 0) // SYNC FIRST TWO
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	88 23       	and	r24, r24
 200:	09 f4       	brne	.+2      	; 0x204 <main+0x11c>
 202:	80 c0       	rjmp	.+256    	; 0x304 <main+0x21c>
		{
			pData.crc16 = 0xFFFF;
			circular_buf_put(&cbuf, &pData, (SYNC>>8));
			circular_buf_put(&cbuf, &pData, SYNC);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 1) { // PACKETID
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	09 f4       	brne	.+2      	; 0x20c <main+0x124>
 20a:	ea c0       	rjmp	.+468    	; 0x3e0 <main+0x2f8>
			circular_buf_put(&cbuf, &pData, pData.subComm_Counter);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 2) { // CH0
 20c:	89 81       	ldd	r24, Y+1	; 0x01
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	09 f4       	brne	.+2      	; 0x214 <main+0x12c>
 212:	1a c1       	rjmp	.+564    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			circular_buf_put(&cbuf, &pData, 0xCD);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 3) { // SUBCOMM
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	09 f4       	brne	.+2      	; 0x21c <main+0x134>
 21a:	4a c1       	rjmp	.+660    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			subCommPacket(&cbuf, &pData);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 4) { // CRC packet
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	84 30       	cpi	r24, 0x04	; 4
 220:	31 f7       	brne	.-52     	; 0x1ee <main+0x106>
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 222:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 226:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 22a:	fc 01       	movw	r30, r24
 22c:	ee 0d       	add	r30, r14
 22e:	ff 1d       	adc	r31, r15
 230:	30 83       	st	Z, r19
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 232:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 236:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_edata+0x6>
 240:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_edata+0x7>
 244:	b7 d1       	rcall	.+878    	; 0x5b4 <__udivmodhi4>
 246:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 24e:	69 81       	ldd	r22, Y+1	; 0x01
 250:	4b 81       	ldd	r20, Y+3	; 0x03
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	41 50       	subi	r20, 0x01	; 1
 258:	51 09       	sbc	r21, r1
 25a:	64 17       	cp	r22, r20
 25c:	75 07       	cpc	r23, r21
 25e:	89 f0       	breq	.+34     	; 0x282 <main+0x19a>
 260:	23 27       	eor	r18, r19
 262:	02 2e       	mov	r0, r18
 264:	22 95       	swap	r18
 266:	20 7f       	andi	r18, 0xF0	; 240
 268:	20 25       	eor	r18, r0
 26a:	03 2e       	mov	r0, r19
 26c:	32 2f       	mov	r19, r18
 26e:	22 95       	swap	r18
 270:	2f 70       	andi	r18, 0x0F	; 15
 272:	02 26       	eor	r0, r18
 274:	26 95       	lsr	r18
 276:	32 27       	eor	r19, r18
 278:	23 27       	eor	r18, r19
 27a:	22 0f       	add	r18, r18
 27c:	22 0f       	add	r18, r18
 27e:	22 0f       	add	r18, r18
 280:	20 25       	eor	r18, r0
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 282:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 286:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 28a:	fa 01       	movw	r30, r20
 28c:	e8 0f       	add	r30, r24
 28e:	f9 1f       	adc	r31, r25
 290:	20 83       	st	Z, r18
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 292:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 296:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 29a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 29e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	b8 01       	movw	r22, r16
 2a6:	86 d1       	rcall	.+780    	; 0x5b4 <__udivmodhi4>
 2a8:	7c 01       	movw	r14, r24
 2aa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 2ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 2b2:	69 81       	ldd	r22, Y+1	; 0x01
 2b4:	4b 81       	ldd	r20, Y+3	; 0x03
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	41 50       	subi	r20, 0x01	; 1
 2bc:	51 09       	sbc	r21, r1
 2be:	64 17       	cp	r22, r20
 2c0:	75 07       	cpc	r23, r21
 2c2:	89 f0       	breq	.+34     	; 0x2e6 <main+0x1fe>
 2c4:	22 27       	eor	r18, r18
 2c6:	02 2e       	mov	r0, r18
 2c8:	22 95       	swap	r18
 2ca:	20 7f       	andi	r18, 0xF0	; 240
 2cc:	20 25       	eor	r18, r0
 2ce:	03 2e       	mov	r0, r19
 2d0:	32 2f       	mov	r19, r18
 2d2:	22 95       	swap	r18
 2d4:	2f 70       	andi	r18, 0x0F	; 15
 2d6:	02 26       	eor	r0, r18
 2d8:	26 95       	lsr	r18
 2da:	32 27       	eor	r19, r18
 2dc:	23 27       	eor	r18, r19
 2de:	22 0f       	add	r18, r18
 2e0:	22 0f       	add	r18, r18
 2e2:	22 0f       	add	r18, r18
 2e4:	20 25       	eor	r18, r0
			subCommPacket(&cbuf, &pData);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 4) { // CRC packet
			circular_buf_put(&cbuf, &pData, (pData.crc16>>8)); // upper 8 bits
			circular_buf_put(&cbuf, &pData, (pData.crc16)); // lower 8 bits
			pData.mainComm_Counter = 0;
 2e6:	19 82       	std	Y+1, r1	; 0x01
 2e8:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <_edata+0x4>
 2ec:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <_edata+0x5>
 2f0:	fc 01       	movw	r30, r24
 2f2:	31 96       	adiw	r30, 0x01	; 1
 2f4:	cf 01       	movw	r24, r30
 2f6:	b8 01       	movw	r22, r16
 2f8:	5d d1       	rcall	.+698    	; 0x5b4 <__udivmodhi4>
 2fa:	8a 15       	cp	r24, r10
 2fc:	9b 05       	cpc	r25, r11
 2fe:	09 f0       	breq	.+2      	; 0x302 <main+0x21a>
 300:	7d cf       	rjmp	.-262    	; 0x1fc <main+0x114>
 302:	ff cf       	rjmp	.-2      	; 0x302 <main+0x21a>
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 308:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 30c:	fc 01       	movw	r30, r24
 30e:	ee 0d       	add	r30, r14
 310:	ff 1d       	adc	r31, r15
 312:	80 82       	st	Z, r8
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 318:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_edata+0x6>
 322:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_edata+0x7>
 326:	46 d1       	rcall	.+652    	; 0x5b4 <__udivmodhi4>
 328:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 32c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 330:	49 81       	ldd	r20, Y+1	; 0x01
 332:	2b 81       	ldd	r18, Y+3	; 0x03
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	31 09       	sbc	r19, r1
 33c:	42 17       	cp	r20, r18
 33e:	53 07       	cpc	r21, r19
 340:	09 f4       	brne	.+2      	; 0x344 <main+0x25c>
 342:	c1 c0       	rjmp	.+386    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 344:	96 01       	movw	r18, r12
 346:	28 25       	eor	r18, r8
 348:	02 2e       	mov	r0, r18
 34a:	22 95       	swap	r18
 34c:	20 7f       	andi	r18, 0xF0	; 240
 34e:	20 25       	eor	r18, r0
 350:	03 2e       	mov	r0, r19
 352:	32 2f       	mov	r19, r18
 354:	22 95       	swap	r18
 356:	2f 70       	andi	r18, 0x0F	; 15
 358:	02 26       	eor	r0, r18
 35a:	26 95       	lsr	r18
 35c:	32 27       	eor	r19, r18
 35e:	23 27       	eor	r18, r19
 360:	22 0f       	add	r18, r18
 362:	22 0f       	add	r18, r18
 364:	22 0f       	add	r18, r18
 366:	20 25       	eor	r18, r0
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 368:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 36c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 370:	fa 01       	movw	r30, r20
 372:	e8 0f       	add	r30, r24
 374:	f9 1f       	adc	r31, r25
 376:	90 82       	st	Z, r9
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 378:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 37c:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 380:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 384:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	b8 01       	movw	r22, r16
 38c:	13 d1       	rcall	.+550    	; 0x5b4 <__udivmodhi4>
 38e:	7c 01       	movw	r14, r24
 390:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 394:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 398:	69 81       	ldd	r22, Y+1	; 0x01
 39a:	4b 81       	ldd	r20, Y+3	; 0x03
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	41 50       	subi	r20, 0x01	; 1
 3a2:	51 09       	sbc	r21, r1
 3a4:	64 17       	cp	r22, r20
 3a6:	75 07       	cpc	r23, r21
 3a8:	89 f0       	breq	.+34     	; 0x3cc <main+0x2e4>
 3aa:	29 25       	eor	r18, r9
 3ac:	02 2e       	mov	r0, r18
 3ae:	22 95       	swap	r18
 3b0:	20 7f       	andi	r18, 0xF0	; 240
 3b2:	20 25       	eor	r18, r0
 3b4:	03 2e       	mov	r0, r19
 3b6:	32 2f       	mov	r19, r18
 3b8:	22 95       	swap	r18
 3ba:	2f 70       	andi	r18, 0x0F	; 15
 3bc:	02 26       	eor	r0, r18
 3be:	26 95       	lsr	r18
 3c0:	32 27       	eor	r19, r18
 3c2:	23 27       	eor	r18, r19
 3c4:	22 0f       	add	r18, r18
 3c6:	22 0f       	add	r18, r18
 3c8:	22 0f       	add	r18, r18
 3ca:	20 25       	eor	r18, r0
			} else if (pData.mainComm_Counter == 1) { // PACKETID
			circular_buf_put(&cbuf, &pData, pData.subComm_Counter);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 2) { // CH0
			circular_buf_put(&cbuf, &pData, 0xCD);
			pData.mainComm_Counter++;
 3cc:	49 81       	ldd	r20, Y+1	; 0x01
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	49 83       	std	Y+1, r20	; 0x01
 3d2:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <_edata+0x4>
 3d6:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <_edata+0x5>
 3da:	fc 01       	movw	r30, r24
 3dc:	31 96       	adiw	r30, 0x01	; 1
 3de:	07 cf       	rjmp	.-498    	; 0x1ee <main+0x106>
			pData.crc16 = 0xFFFF;
			circular_buf_put(&cbuf, &pData, (SYNC>>8));
			circular_buf_put(&cbuf, &pData, SYNC);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 1) { // PACKETID
			circular_buf_put(&cbuf, &pData, pData.subComm_Counter);
 3e0:	ea 81       	ldd	r30, Y+2	; 0x02
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 3e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 3ea:	dc 01       	movw	r26, r24
 3ec:	ae 0d       	add	r26, r14
 3ee:	bf 1d       	adc	r27, r15
 3f0:	ec 93       	st	X, r30
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 3f2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 3f6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 3fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 3fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	b8 01       	movw	r22, r16
 406:	d6 d0       	rcall	.+428    	; 0x5b4 <__udivmodhi4>
 408:	7c 01       	movw	r14, r24
 40a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 40e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 412:	69 81       	ldd	r22, Y+1	; 0x01
 414:	4b 81       	ldd	r20, Y+3	; 0x03
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	41 50       	subi	r20, 0x01	; 1
 41c:	51 09       	sbc	r21, r1
 41e:	64 17       	cp	r22, r20
 420:	75 07       	cpc	r23, r21
 422:	a1 f2       	breq	.-88     	; 0x3cc <main+0x2e4>
 424:	2e 27       	eor	r18, r30
 426:	02 2e       	mov	r0, r18
 428:	22 95       	swap	r18
 42a:	20 7f       	andi	r18, 0xF0	; 240
 42c:	20 25       	eor	r18, r0
 42e:	03 2e       	mov	r0, r19
 430:	32 2f       	mov	r19, r18
 432:	22 95       	swap	r18
 434:	2f 70       	andi	r18, 0x0F	; 15
 436:	02 26       	eor	r0, r18
 438:	26 95       	lsr	r18
 43a:	32 27       	eor	r19, r18
 43c:	23 27       	eor	r18, r19
 43e:	22 0f       	add	r18, r18
 440:	22 0f       	add	r18, r18
 442:	22 0f       	add	r18, r18
 444:	20 25       	eor	r18, r0
 446:	c2 cf       	rjmp	.-124    	; 0x3cc <main+0x2e4>
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 44c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 450:	fc 01       	movw	r30, r24
 452:	ee 0d       	add	r30, r14
 454:	ff 1d       	adc	r31, r15
 456:	70 82       	st	Z, r7
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 458:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 45c:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 460:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 464:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	b8 01       	movw	r22, r16
 46c:	a3 d0       	rcall	.+326    	; 0x5b4 <__udivmodhi4>
 46e:	7c 01       	movw	r14, r24
 470:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 474:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 478:	69 81       	ldd	r22, Y+1	; 0x01
 47a:	4b 81       	ldd	r20, Y+3	; 0x03
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	41 50       	subi	r20, 0x01	; 1
 482:	51 09       	sbc	r21, r1
 484:	64 17       	cp	r22, r20
 486:	75 07       	cpc	r23, r21
 488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	a0 cf       	rjmp	.-192    	; 0x3cc <main+0x2e4>
 48c:	27 25       	eor	r18, r7
 48e:	02 2e       	mov	r0, r18
 490:	22 95       	swap	r18
 492:	20 7f       	andi	r18, 0xF0	; 240
 494:	20 25       	eor	r18, r0
 496:	03 2e       	mov	r0, r19
 498:	32 2f       	mov	r19, r18
 49a:	22 95       	swap	r18
 49c:	2f 70       	andi	r18, 0x0F	; 15
 49e:	02 26       	eor	r0, r18
 4a0:	26 95       	lsr	r18
 4a2:	32 27       	eor	r19, r18
 4a4:	23 27       	eor	r18, r19
 4a6:	22 0f       	add	r18, r18
 4a8:	22 0f       	add	r18, r18
 4aa:	22 0f       	add	r18, r18
 4ac:	20 25       	eor	r18, r0
 4ae:	8e cf       	rjmp	.-228    	; 0x3cc <main+0x2e4>
	UDR0 = 	circular_buf_get(&cbuf);;
}

void subCommPacket(circular_buf_t * cbuf, packet_data * pData)
{
	if(pData->subComm_Counter == 0)
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	88 23       	and	r24, r24
 4b4:	59 f0       	breq	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	{
		circular_buf_put(cbuf,pData, 0x33);
		pData->subComm_Counter++;
		
	} else if(pData->subComm_Counter == 1)
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	09 f4       	brne	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4bc:	42 c0       	rjmp	.+132    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			} else if (pData.mainComm_Counter == 2) { // CH0
			circular_buf_put(&cbuf, &pData, 0xCD);
			pData.mainComm_Counter++;
			} else if (pData.mainComm_Counter == 3) { // SUBCOMM
			subCommPacket(&cbuf, &pData);
			pData.mainComm_Counter++;
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	8f 5f       	subi	r24, 0xFF	; 255
 4c2:	89 83       	std	Y+1, r24	; 0x01
 4c4:	94 ce       	rjmp	.-728    	; 0x1ee <main+0x106>
{
	cbuf->buffer[cbuf->head] = data; // Data added
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	3f ef       	ldi	r19, 0xFF	; 255
 4ca:	4e cf       	rjmp	.-356    	; 0x368 <main+0x280>
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 4cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 4d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 4d4:	ee 0d       	add	r30, r14
 4d6:	ff 1d       	adc	r31, r15
 4d8:	60 82       	st	Z, r6
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 4da:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 4de:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 4e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 4e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	b8 01       	movw	r22, r16
 4ee:	62 d0       	rcall	.+196    	; 0x5b4 <__udivmodhi4>
 4f0:	7c 01       	movw	r14, r24
 4f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 4f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 4fa:	69 81       	ldd	r22, Y+1	; 0x01
 4fc:	4b 81       	ldd	r20, Y+3	; 0x03
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	41 50       	subi	r20, 0x01	; 1
 504:	51 09       	sbc	r21, r1
 506:	64 17       	cp	r22, r20
 508:	75 07       	cpc	r23, r21
 50a:	89 f0       	breq	.+34     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 50c:	26 25       	eor	r18, r6
 50e:	02 2e       	mov	r0, r18
 510:	22 95       	swap	r18
 512:	20 7f       	andi	r18, 0xF0	; 240
 514:	20 25       	eor	r18, r0
 516:	03 2e       	mov	r0, r19
 518:	32 2f       	mov	r19, r18
 51a:	22 95       	swap	r18
 51c:	2f 70       	andi	r18, 0x0F	; 15
 51e:	02 26       	eor	r0, r18
 520:	26 95       	lsr	r18
 522:	32 27       	eor	r19, r18
 524:	23 27       	eor	r18, r19
 526:	22 0f       	add	r18, r18
 528:	22 0f       	add	r18, r18
 52a:	22 0f       	add	r18, r18
 52c:	20 25       	eor	r18, r0
void subCommPacket(circular_buf_t * cbuf, packet_data * pData)
{
	if(pData->subComm_Counter == 0)
	{
		circular_buf_put(cbuf,pData, 0x33);
		pData->subComm_Counter++;
 52e:	4a 81       	ldd	r20, Y+2	; 0x02
 530:	4f 5f       	subi	r20, 0xFF	; 255
 532:	4a 83       	std	Y+2, r20	; 0x02
 534:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <_edata+0x4>
 538:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <_edata+0x5>
 53c:	fc 01       	movw	r30, r24
 53e:	31 96       	adiw	r30, 0x01	; 1
 540:	be cf       	rjmp	.-132    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
}

// Put 8 bit data into cbuf buffer
void circular_buf_put(circular_buf_t * cbuf,packet_data * pData, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data; // Data added
 542:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 546:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 54a:	ee 0d       	add	r30, r14
 54c:	ff 1d       	adc	r31, r15
 54e:	50 82       	st	Z, r5
	cbuf->head = (cbuf->head + 1) % cbuf->size; // Increase head and resets on 24%24 => 0
 550:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
 554:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
 558:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
 55c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	b8 01       	movw	r22, r16
 564:	27 d0       	rcall	.+78     	; 0x5b4 <__udivmodhi4>
 566:	7c 01       	movw	r14, r24
 568:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 56c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
	
	// CRC UPDATER
	if(!(pData->mainComm_Counter == pData->maxMainComms-1))
 570:	69 81       	ldd	r22, Y+1	; 0x01
 572:	4b 81       	ldd	r20, Y+3	; 0x03
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	41 50       	subi	r20, 0x01	; 1
 57a:	51 09       	sbc	r21, r1
 57c:	64 17       	cp	r22, r20
 57e:	75 07       	cpc	r23, r21
 580:	89 f0       	breq	.+34     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 582:	25 25       	eor	r18, r5
 584:	02 2e       	mov	r0, r18
 586:	22 95       	swap	r18
 588:	20 7f       	andi	r18, 0xF0	; 240
 58a:	20 25       	eor	r18, r0
 58c:	03 2e       	mov	r0, r19
 58e:	32 2f       	mov	r19, r18
 590:	22 95       	swap	r18
 592:	2f 70       	andi	r18, 0x0F	; 15
 594:	02 26       	eor	r0, r18
 596:	26 95       	lsr	r18
 598:	32 27       	eor	r19, r18
 59a:	23 27       	eor	r18, r19
 59c:	22 0f       	add	r18, r18
 59e:	22 0f       	add	r18, r18
 5a0:	22 0f       	add	r18, r18
 5a2:	20 25       	eor	r18, r0
		pData->subComm_Counter++;
		
	} else if(pData->subComm_Counter == 1)
	{
		circular_buf_put(cbuf,pData, 0x34);
		pData->subComm_Counter = 0;
 5a4:	1a 82       	std	Y+2, r1	; 0x02
 5a6:	a0 90 04 01 	lds	r10, 0x0104	; 0x800104 <_edata+0x4>
 5aa:	b0 90 05 01 	lds	r11, 0x0105	; 0x800105 <_edata+0x5>
 5ae:	fc 01       	movw	r30, r24
 5b0:	31 96       	adiw	r30, 0x01	; 1
 5b2:	85 cf       	rjmp	.-246    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

000005b4 <__udivmodhi4>:
 5b4:	aa 1b       	sub	r26, r26
 5b6:	bb 1b       	sub	r27, r27
 5b8:	51 e1       	ldi	r21, 0x11	; 17
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <__udivmodhi4_ep>

000005bc <__udivmodhi4_loop>:
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	a6 17       	cp	r26, r22
 5c2:	b7 07       	cpc	r27, r23
 5c4:	10 f0       	brcs	.+4      	; 0x5ca <__udivmodhi4_ep>
 5c6:	a6 1b       	sub	r26, r22
 5c8:	b7 0b       	sbc	r27, r23

000005ca <__udivmodhi4_ep>:
 5ca:	88 1f       	adc	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	5a 95       	dec	r21
 5d0:	a9 f7       	brne	.-22     	; 0x5bc <__udivmodhi4_loop>
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	bc 01       	movw	r22, r24
 5d8:	cd 01       	movw	r24, r26
 5da:	08 95       	ret

000005dc <__umulhisi3>:
 5dc:	a2 9f       	mul	r26, r18
 5de:	b0 01       	movw	r22, r0
 5e0:	b3 9f       	mul	r27, r19
 5e2:	c0 01       	movw	r24, r0
 5e4:	a3 9f       	mul	r26, r19
 5e6:	70 0d       	add	r23, r0
 5e8:	81 1d       	adc	r24, r1
 5ea:	11 24       	eor	r1, r1
 5ec:	91 1d       	adc	r25, r1
 5ee:	b2 9f       	mul	r27, r18
 5f0:	70 0d       	add	r23, r0
 5f2:	81 1d       	adc	r24, r1
 5f4:	11 24       	eor	r1, r1
 5f6:	91 1d       	adc	r25, r1
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
