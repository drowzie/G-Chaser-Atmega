
KommunikasjonsProtokoll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f00  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000837  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc3  00000000  00000000  00002cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000039ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__vector_19>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	a0 d0       	rcall	.+320    	; 0x1c6 <main>
  86:	ec c0       	rjmp	.+472    	; 0x260 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <spi_init_dac>:

// Set up for DAC usage.
void spi_init_dac()
{
	// Reset pins
	DDR_SPI &= ~((1<<DD_MOSI)|(1<<DD_MISO)|(1<<DD_SCK));
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	87 7c       	andi	r24, 0xC7	; 199
  8e:	84 b9       	out	0x04, r24	; 4
	// Output
	DDR_SPI |= ((1<<DD_MOSI)|(1<<DD_SCK));
  90:	84 b1       	in	r24, 0x04	; 4
  92:	88 62       	ori	r24, 0x28	; 40
  94:	84 b9       	out	0x04, r24	; 4
	
	SPCR = ((1<<SPE)|	// ENABLE
  96:	81 e5       	ldi	r24, 0x51	; 81
  98:	8c bd       	out	0x2c, r24	; 44
			(1<<MSTR)|	//Master/slave sel
			(0<<SPR1)|(1<<SPR0)| // Spi clock rate -- SPI2X:0 = fosc/4, Spi2x:1 = fosc/2
			(0<<CPOL)|	// Clock polarity
			(0<<CPHA)); // Clock phase
			
	SPSR = (1<<SPI2X);  // Double Clock Rate
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8d bd       	out	0x2d, r24	; 45
  9e:	08 95       	ret

000000a0 <circular_buf_put>:
void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = data;
  a0:	fc 01       	movw	r30, r24
  a2:	89 2b       	or	r24, r25
  a4:	e9 f0       	breq	.+58     	; 0xe0 <circular_buf_put+0x40>
  a6:	a0 81       	ld	r26, Z
  a8:	b1 81       	ldd	r27, Z+1	; 0x01
  aa:	82 81       	ldd	r24, Z+2	; 0x02
  ac:	93 81       	ldd	r25, Z+3	; 0x03
  ae:	a8 0f       	add	r26, r24
  b0:	b9 1f       	adc	r27, r25
  b2:	6c 93       	st	X, r22
  b4:	26 81       	ldd	r18, Z+6	; 0x06
  b6:	37 81       	ldd	r19, Z+7	; 0x07
  b8:	82 81       	ldd	r24, Z+2	; 0x02
  ba:	93 81       	ldd	r25, Z+3	; 0x03
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	b9 01       	movw	r22, r18
  c0:	bb d0       	rcall	.+374    	; 0x238 <__udivmodhi4>
  c2:	93 83       	std	Z+3, r25	; 0x03
  c4:	82 83       	std	Z+2, r24	; 0x02
  c6:	44 81       	ldd	r20, Z+4	; 0x04
  c8:	55 81       	ldd	r21, Z+5	; 0x05
  ca:	84 17       	cp	r24, r20
  cc:	95 07       	cpc	r25, r21
  ce:	59 f4       	brne	.+22     	; 0xe6 <circular_buf_put+0x46>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	b9 01       	movw	r22, r18
  d4:	b1 d0       	rcall	.+354    	; 0x238 <__udivmodhi4>
  d6:	95 83       	std	Z+5, r25	; 0x05
  d8:	84 83       	std	Z+4, r24	; 0x04
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	9f ef       	ldi	r25, 0xFF	; 255
  e4:	08 95       	ret
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <circular_buf_get>:
  ec:	fc 01       	movw	r30, r24
  ee:	89 2b       	or	r24, r25
  f0:	e1 f0       	breq	.+56     	; 0x12a <circular_buf_get+0x3e>
  f2:	61 15       	cp	r22, r1
  f4:	71 05       	cpc	r23, r1
  f6:	e1 f0       	breq	.+56     	; 0x130 <circular_buf_get+0x44>
  f8:	22 81       	ldd	r18, Z+2	; 0x02
  fa:	33 81       	ldd	r19, Z+3	; 0x03
  fc:	84 81       	ldd	r24, Z+4	; 0x04
  fe:	95 81       	ldd	r25, Z+5	; 0x05
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	c1 f0       	breq	.+48     	; 0x136 <circular_buf_get+0x4a>
 106:	a0 81       	ld	r26, Z
 108:	b1 81       	ldd	r27, Z+1	; 0x01
 10a:	a8 0f       	add	r26, r24
 10c:	b9 1f       	adc	r27, r25
 10e:	8c 91       	ld	r24, X
 110:	db 01       	movw	r26, r22
 112:	8c 93       	st	X, r24
 114:	84 81       	ldd	r24, Z+4	; 0x04
 116:	95 81       	ldd	r25, Z+5	; 0x05
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	66 81       	ldd	r22, Z+6	; 0x06
 11c:	77 81       	ldd	r23, Z+7	; 0x07
 11e:	8c d0       	rcall	.+280    	; 0x238 <__udivmodhi4>
 120:	95 83       	std	Z+5, r25	; 0x05
 122:	84 83       	std	Z+4, r24	; 0x04
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	08 95       	ret
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	08 95       	ret
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	9f ef       	ldi	r25, 0xFF	; 255
 134:	08 95       	ret
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9f ef       	ldi	r25, 0xFF	; 255
 13a:	08 95       	ret

0000013c <Port_Init>:
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	84 b9       	out	0x04, r24	; 4
 140:	87 b9       	out	0x07, r24	; 7
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	8a b9       	out	0x0a, r24	; 10
 146:	08 95       	ret

00000148 <USART_Init>:
 148:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 15c:	08 95       	ret

0000015e <__vector_19>:
uint16_t crc16;
circular_buf_t cbuf;

// INTERRUPT FUNCTION
ISR(USART_UDRE_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
	uint8_t transmitdata = 0;
 18a:	19 82       	std	Y+1, r1	; 0x01
	circular_buf_get(&cbuf,&transmitdata);
 18c:	be 01       	movw	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	aa df       	rcall	.-172    	; 0xec <circular_buf_get>
	UDR0 = transmitdata;
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

}
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <main>:
	
// ############################ MAIN #######################//	
int main(void) {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	cc 52       	subi	r28, 0x2C	; 44
 1d0:	d1 40       	sbci	r29, 0x01	; 1
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61

	uint8_t array[300];

	/////////INITS///////
	// Declare the circular buffer struct with size 5.
	cbuf.size = 300;
 1dc:	e2 e0       	ldi	r30, 0x02	; 2
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	8c e2       	ldi	r24, 0x2C	; 44
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	97 83       	std	Z+7, r25	; 0x07
 1e6:	86 83       	std	Z+6, r24	; 0x06
	cbuf.buffer = array;   //malloc(cbuf.size); // Malloc returns a pointer to allocated memory. or NULL if it fails. Takes memory from heap in runtime.
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
	
	crc16 = 0xFFFF; // Start value of CRC16
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
 1f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	spi_init_dac();		// SPI before Port init so that the SS is properly configured.
 1fc:	46 df       	rcall	.-372    	; 0x8a <spi_init_dac>
	Port_Init();
 1fe:	9e df       	rcall	.-196    	; 0x13c <Port_Init>
 200:	78 94       	sei
	
	
	 sei();							// Interrupt
 202:	87 e6       	ldi	r24, 0x67	; 103
	 USART_Init(MYUBRR);
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a0 df       	rcall	.-192    	; 0x148 <USART_Init>
 208:	02 e0       	ldi	r16, 0x02	; 2
 20a:	11 e0       	ldi	r17, 0x01	; 1
 20c:	f8 01       	movw	r30, r16
	
	while(1)
	{
		if (!circular_buf_full(cbuf))
 20e:	82 81       	ldd	r24, Z+2	; 0x02
 210:	93 81       	ldd	r25, Z+3	; 0x03
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	66 81       	ldd	r22, Z+6	; 0x06
 216:	77 81       	ldd	r23, Z+7	; 0x07
 218:	0f d0       	rcall	.+30     	; 0x238 <__udivmodhi4>
 21a:	24 81       	ldd	r18, Z+4	; 0x04
 21c:	35 81       	ldd	r19, Z+5	; 0x05
 21e:	28 17       	cp	r18, r24
 220:	39 07       	cpc	r19, r25
 222:	21 f0       	breq	.+8      	; 0x22c <main+0x66>
		{
			circular_buf_put(&cbuf, 'a');
 224:	61 e6       	ldi	r22, 0x61	; 97
 226:	c8 01       	movw	r24, r16
 228:	3b df       	rcall	.-394    	; 0xa0 <circular_buf_put>
 22a:	f0 cf       	rjmp	.-32     	; 0x20c <main+0x46>
 22c:	f8 01       	movw	r30, r16
{
	int r = -1;

	if(cbuf)
	{
		cbuf->head = 0;
 22e:	13 82       	std	Z+3, r1	; 0x03
 230:	12 82       	std	Z+2, r1	; 0x02
 232:	15 82       	std	Z+5, r1	; 0x05
		cbuf->tail = 0;
 234:	14 82       	std	Z+4, r1	; 0x04
 236:	ea cf       	rjmp	.-44     	; 0x20c <main+0x46>

00000238 <__udivmodhi4>:
 238:	aa 1b       	sub	r26, r26
 23a:	bb 1b       	sub	r27, r27
 23c:	51 e1       	ldi	r21, 0x11	; 17
 23e:	07 c0       	rjmp	.+14     	; 0x24e <__udivmodhi4_ep>

00000240 <__udivmodhi4_loop>:
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	a6 17       	cp	r26, r22
 246:	b7 07       	cpc	r27, r23
 248:	10 f0       	brcs	.+4      	; 0x24e <__udivmodhi4_ep>
 24a:	a6 1b       	sub	r26, r22
 24c:	b7 0b       	sbc	r27, r23

0000024e <__udivmodhi4_ep>:
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	5a 95       	dec	r21
 254:	a9 f7       	brne	.-22     	; 0x240 <__udivmodhi4_loop>
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
