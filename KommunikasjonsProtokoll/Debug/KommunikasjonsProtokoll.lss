
KommunikasjonsProtokoll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800206  00800206  000004ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e89  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7f  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000436  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f8  00000000  00000000  00002b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a6 e0       	ldi	r26, 0x06	; 6
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 30       	cpi	r26, 0x0E	; 14
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e0 e3       	ldi	r30, 0x30	; 48
 10c:	f4 e0       	ldi	r31, 0x04	; 4
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a6 30       	cpi	r26, 0x06	; 6
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	28 d0       	rcall	.+80     	; 0x170 <main>
 120:	85 c1       	rjmp	.+778    	; 0x42c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <circular_buf_put>:

		r = 0;
	}

	return r;
}
 124:	fc 01       	movw	r30, r24
 126:	89 2b       	or	r24, r25
 128:	e9 f0       	breq	.+58     	; 0x164 <circular_buf_put+0x40>
 12a:	a0 81       	ld	r26, Z
 12c:	b1 81       	ldd	r27, Z+1	; 0x01
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	93 81       	ldd	r25, Z+3	; 0x03
 132:	a8 0f       	add	r26, r24
 134:	b9 1f       	adc	r27, r25
 136:	6c 93       	st	X, r22
 138:	26 81       	ldd	r18, Z+6	; 0x06
 13a:	37 81       	ldd	r19, Z+7	; 0x07
 13c:	82 81       	ldd	r24, Z+2	; 0x02
 13e:	93 81       	ldd	r25, Z+3	; 0x03
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	b9 01       	movw	r22, r18
 144:	3e d0       	rcall	.+124    	; 0x1c2 <__udivmodhi4>
 146:	93 83       	std	Z+3, r25	; 0x03
 148:	82 83       	std	Z+2, r24	; 0x02
 14a:	44 81       	ldd	r20, Z+4	; 0x04
 14c:	55 81       	ldd	r21, Z+5	; 0x05
 14e:	84 17       	cp	r24, r20
 150:	95 07       	cpc	r25, r21
 152:	59 f4       	brne	.+22     	; 0x16a <circular_buf_put+0x46>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	b9 01       	movw	r22, r18
 158:	34 d0       	rcall	.+104    	; 0x1c2 <__udivmodhi4>
 15a:	95 83       	std	Z+5, r25	; 0x05
 15c:	84 83       	std	Z+4, r24	; 0x04
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret

00000170 <main>:

// Init function
	uint8_t UpperSync;
	uint8_t lowerSync;
int main(void) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	28 97       	sbiw	r28, 0x08	; 8
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
	circular_buf_t cbuf;
	cbuf.size = 5;
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	98 87       	std	Y+8, r25	; 0x08
 18a:	8f 83       	std	Y+7, r24	; 0x07
	cbuf.buffer = malloc(cbuf.size); // Malloc returns a pointer to allocated memory. or NULL if it fails.
 18c:	2e d0       	rcall	.+92     	; 0x1ea <malloc>
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
	crc16 = 0xFFFF; // Start value of CRC16
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <crc16+0x1>
 19a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <crc16>
	
	uint16_t Synkeord = 0xABCD;

	UpperSync = Synkeord & 0x00FF;
 19e:	8d ec       	ldi	r24, 0xCD	; 205
 1a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
	
	circular_buf_put(&cbuf, UpperSync);
 1a4:	6d ec       	ldi	r22, 0xCD	; 205
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	bc df       	rcall	.-136    	; 0x124 <circular_buf_put>
	 //premade in atmel studio, ccitt update will update its values everytime the data is added.
	 //use http://www.sunshine2k.de/coding/javascript/crc/crc_js.html to test crc
	
	
return 0;
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	28 96       	adiw	r28, 0x08	; 8
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <__udivmodhi4>:
 1c2:	aa 1b       	sub	r26, r26
 1c4:	bb 1b       	sub	r27, r27
 1c6:	51 e1       	ldi	r21, 0x11	; 17
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <__udivmodhi4_ep>

000001ca <__udivmodhi4_loop>:
 1ca:	aa 1f       	adc	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	a6 17       	cp	r26, r22
 1d0:	b7 07       	cpc	r27, r23
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__udivmodhi4_ep>
 1d4:	a6 1b       	sub	r26, r22
 1d6:	b7 0b       	sbc	r27, r23

000001d8 <__udivmodhi4_ep>:
 1d8:	88 1f       	adc	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	5a 95       	dec	r21
 1de:	a9 f7       	brne	.-22     	; 0x1ca <__udivmodhi4_loop>
 1e0:	80 95       	com	r24
 1e2:	90 95       	com	r25
 1e4:	bc 01       	movw	r22, r24
 1e6:	cd 01       	movw	r24, r26
 1e8:	08 95       	ret

000001ea <malloc>:
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	91 05       	cpc	r25, r1
 1f6:	10 f4       	brcc	.+4      	; 0x1fc <malloc+0x12>
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__flp>
 200:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__flp+0x1>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	30 97       	sbiw	r30, 0x00	; 0
 20e:	19 f1       	breq	.+70     	; 0x256 <malloc+0x6c>
 210:	40 81       	ld	r20, Z
 212:	51 81       	ldd	r21, Z+1	; 0x01
 214:	02 81       	ldd	r16, Z+2	; 0x02
 216:	13 81       	ldd	r17, Z+3	; 0x03
 218:	48 17       	cp	r20, r24
 21a:	59 07       	cpc	r21, r25
 21c:	c8 f0       	brcs	.+50     	; 0x250 <malloc+0x66>
 21e:	84 17       	cp	r24, r20
 220:	95 07       	cpc	r25, r21
 222:	69 f4       	brne	.+26     	; 0x23e <malloc+0x54>
 224:	10 97       	sbiw	r26, 0x00	; 0
 226:	31 f0       	breq	.+12     	; 0x234 <malloc+0x4a>
 228:	12 96       	adiw	r26, 0x02	; 2
 22a:	0c 93       	st	X, r16
 22c:	12 97       	sbiw	r26, 0x02	; 2
 22e:	13 96       	adiw	r26, 0x03	; 3
 230:	1c 93       	st	X, r17
 232:	27 c0       	rjmp	.+78     	; 0x282 <malloc+0x98>
 234:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__flp>
 238:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__flp+0x1>
 23c:	22 c0       	rjmp	.+68     	; 0x282 <malloc+0x98>
 23e:	21 15       	cp	r18, r1
 240:	31 05       	cpc	r19, r1
 242:	19 f0       	breq	.+6      	; 0x24a <malloc+0x60>
 244:	42 17       	cp	r20, r18
 246:	53 07       	cpc	r21, r19
 248:	18 f4       	brcc	.+6      	; 0x250 <malloc+0x66>
 24a:	9a 01       	movw	r18, r20
 24c:	bd 01       	movw	r22, r26
 24e:	ef 01       	movw	r28, r30
 250:	df 01       	movw	r26, r30
 252:	f8 01       	movw	r30, r16
 254:	db cf       	rjmp	.-74     	; 0x20c <malloc+0x22>
 256:	21 15       	cp	r18, r1
 258:	31 05       	cpc	r19, r1
 25a:	f9 f0       	breq	.+62     	; 0x29a <malloc+0xb0>
 25c:	28 1b       	sub	r18, r24
 25e:	39 0b       	sbc	r19, r25
 260:	24 30       	cpi	r18, 0x04	; 4
 262:	31 05       	cpc	r19, r1
 264:	80 f4       	brcc	.+32     	; 0x286 <malloc+0x9c>
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	9b 81       	ldd	r25, Y+3	; 0x03
 26a:	61 15       	cp	r22, r1
 26c:	71 05       	cpc	r23, r1
 26e:	21 f0       	breq	.+8      	; 0x278 <malloc+0x8e>
 270:	fb 01       	movw	r30, r22
 272:	93 83       	std	Z+3, r25	; 0x03
 274:	82 83       	std	Z+2, r24	; 0x02
 276:	04 c0       	rjmp	.+8      	; 0x280 <malloc+0x96>
 278:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__flp+0x1>
 27c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__flp>
 280:	fe 01       	movw	r30, r28
 282:	32 96       	adiw	r30, 0x02	; 2
 284:	44 c0       	rjmp	.+136    	; 0x30e <malloc+0x124>
 286:	fe 01       	movw	r30, r28
 288:	e2 0f       	add	r30, r18
 28a:	f3 1f       	adc	r31, r19
 28c:	81 93       	st	Z+, r24
 28e:	91 93       	st	Z+, r25
 290:	22 50       	subi	r18, 0x02	; 2
 292:	31 09       	sbc	r19, r1
 294:	39 83       	std	Y+1, r19	; 0x01
 296:	28 83       	st	Y, r18
 298:	3a c0       	rjmp	.+116    	; 0x30e <malloc+0x124>
 29a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 29e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 2a2:	23 2b       	or	r18, r19
 2a4:	41 f4       	brne	.+16     	; 0x2b6 <malloc+0xcc>
 2a6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 2aa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 2ae:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <__brkval+0x1>
 2b2:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <__brkval>
 2b6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 2ba:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 2be:	21 15       	cp	r18, r1
 2c0:	31 05       	cpc	r19, r1
 2c2:	41 f4       	brne	.+16     	; 0x2d4 <malloc+0xea>
 2c4:	2d b7       	in	r18, 0x3d	; 61
 2c6:	3e b7       	in	r19, 0x3e	; 62
 2c8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 2cc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 2d0:	24 1b       	sub	r18, r20
 2d2:	35 0b       	sbc	r19, r21
 2d4:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__brkval>
 2d8:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__brkval+0x1>
 2dc:	e2 17       	cp	r30, r18
 2de:	f3 07       	cpc	r31, r19
 2e0:	a0 f4       	brcc	.+40     	; 0x30a <malloc+0x120>
 2e2:	2e 1b       	sub	r18, r30
 2e4:	3f 0b       	sbc	r19, r31
 2e6:	28 17       	cp	r18, r24
 2e8:	39 07       	cpc	r19, r25
 2ea:	78 f0       	brcs	.+30     	; 0x30a <malloc+0x120>
 2ec:	ac 01       	movw	r20, r24
 2ee:	4e 5f       	subi	r20, 0xFE	; 254
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
 2f2:	24 17       	cp	r18, r20
 2f4:	35 07       	cpc	r19, r21
 2f6:	48 f0       	brcs	.+18     	; 0x30a <malloc+0x120>
 2f8:	4e 0f       	add	r20, r30
 2fa:	5f 1f       	adc	r21, r31
 2fc:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <__brkval+0x1>
 300:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <__brkval>
 304:	81 93       	st	Z+, r24
 306:	91 93       	st	Z+, r25
 308:	02 c0       	rjmp	.+4      	; 0x30e <malloc+0x124>
 30a:	e0 e0       	ldi	r30, 0x00	; 0
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	cf 01       	movw	r24, r30
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <free>:
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	09 f4       	brne	.+2      	; 0x324 <free+0xa>
 322:	81 c0       	rjmp	.+258    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 324:	fc 01       	movw	r30, r24
 326:	32 97       	sbiw	r30, 0x02	; 2
 328:	13 82       	std	Z+3, r1	; 0x03
 32a:	12 82       	std	Z+2, r1	; 0x02
 32c:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <__flp>
 330:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <__flp+0x1>
 334:	10 97       	sbiw	r26, 0x00	; 0
 336:	81 f4       	brne	.+32     	; 0x358 <free+0x3e>
 338:	20 81       	ld	r18, Z
 33a:	31 81       	ldd	r19, Z+1	; 0x01
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 344:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	51 f5       	brne	.+84     	; 0x3a2 <free+0x88>
 34e:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__brkval+0x1>
 352:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__brkval>
 356:	67 c0       	rjmp	.+206    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 358:	ed 01       	movw	r28, r26
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	ce 17       	cp	r28, r30
 360:	df 07       	cpc	r29, r31
 362:	40 f4       	brcc	.+16     	; 0x374 <free+0x5a>
 364:	4a 81       	ldd	r20, Y+2	; 0x02
 366:	5b 81       	ldd	r21, Y+3	; 0x03
 368:	9e 01       	movw	r18, r28
 36a:	41 15       	cp	r20, r1
 36c:	51 05       	cpc	r21, r1
 36e:	f1 f0       	breq	.+60     	; 0x3ac <free+0x92>
 370:	ea 01       	movw	r28, r20
 372:	f5 cf       	rjmp	.-22     	; 0x35e <free+0x44>
 374:	d3 83       	std	Z+3, r29	; 0x03
 376:	c2 83       	std	Z+2, r28	; 0x02
 378:	40 81       	ld	r20, Z
 37a:	51 81       	ldd	r21, Z+1	; 0x01
 37c:	84 0f       	add	r24, r20
 37e:	95 1f       	adc	r25, r21
 380:	c8 17       	cp	r28, r24
 382:	d9 07       	cpc	r29, r25
 384:	59 f4       	brne	.+22     	; 0x39c <free+0x82>
 386:	88 81       	ld	r24, Y
 388:	99 81       	ldd	r25, Y+1	; 0x01
 38a:	84 0f       	add	r24, r20
 38c:	95 1f       	adc	r25, r21
 38e:	02 96       	adiw	r24, 0x02	; 2
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	80 83       	st	Z, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	9b 81       	ldd	r25, Y+3	; 0x03
 398:	93 83       	std	Z+3, r25	; 0x03
 39a:	82 83       	std	Z+2, r24	; 0x02
 39c:	21 15       	cp	r18, r1
 39e:	31 05       	cpc	r19, r1
 3a0:	29 f4       	brne	.+10     	; 0x3ac <free+0x92>
 3a2:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__flp+0x1>
 3a6:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__flp>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ac:	e9 01       	movw	r28, r18
 3ae:	fb 83       	std	Y+3, r31	; 0x03
 3b0:	ea 83       	std	Y+2, r30	; 0x02
 3b2:	49 91       	ld	r20, Y+
 3b4:	59 91       	ld	r21, Y+
 3b6:	c4 0f       	add	r28, r20
 3b8:	d5 1f       	adc	r29, r21
 3ba:	ec 17       	cp	r30, r28
 3bc:	fd 07       	cpc	r31, r29
 3be:	61 f4       	brne	.+24     	; 0x3d8 <free+0xbe>
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	84 0f       	add	r24, r20
 3c6:	95 1f       	adc	r25, r21
 3c8:	02 96       	adiw	r24, 0x02	; 2
 3ca:	e9 01       	movw	r28, r18
 3cc:	99 83       	std	Y+1, r25	; 0x01
 3ce:	88 83       	st	Y, r24
 3d0:	82 81       	ldd	r24, Z+2	; 0x02
 3d2:	93 81       	ldd	r25, Z+3	; 0x03
 3d4:	9b 83       	std	Y+3, r25	; 0x03
 3d6:	8a 83       	std	Y+2, r24	; 0x02
 3d8:	e0 e0       	ldi	r30, 0x00	; 0
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	12 96       	adiw	r26, 0x02	; 2
 3de:	8d 91       	ld	r24, X+
 3e0:	9c 91       	ld	r25, X
 3e2:	13 97       	sbiw	r26, 0x03	; 3
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	19 f0       	breq	.+6      	; 0x3ee <free+0xd4>
 3e8:	fd 01       	movw	r30, r26
 3ea:	dc 01       	movw	r26, r24
 3ec:	f7 cf       	rjmp	.-18     	; 0x3dc <free+0xc2>
 3ee:	8d 91       	ld	r24, X+
 3f0:	9c 91       	ld	r25, X
 3f2:	11 97       	sbiw	r26, 0x01	; 1
 3f4:	9d 01       	movw	r18, r26
 3f6:	2e 5f       	subi	r18, 0xFE	; 254
 3f8:	3f 4f       	sbci	r19, 0xFF	; 255
 3fa:	82 0f       	add	r24, r18
 3fc:	93 1f       	adc	r25, r19
 3fe:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 402:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 406:	28 17       	cp	r18, r24
 408:	39 07       	cpc	r19, r25
 40a:	69 f4       	brne	.+26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__flp+0x1>
 414:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__flp>
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	13 82       	std	Z+3, r1	; 0x03
 41c:	12 82       	std	Z+2, r1	; 0x02
 41e:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <__brkval+0x1>
 422:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <__brkval>
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
