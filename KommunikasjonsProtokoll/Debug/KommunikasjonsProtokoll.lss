
KommunikasjonsProtokoll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eeprom       000000ca  00810000  00810000  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014df  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1c  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091a  00000000  00000000  00002803  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066f  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084c  00000000  00000000  00003943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000418f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	32 d0       	rcall	.+100    	; 0x15a <main>
  f6:	a5 c0       	rjmp	.+330    	; 0x242 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <spi_init>:

 // Shift full array(8 bits data) through target device
void spiSync(uint8_t * dataout, uint8_t * datain, uint8_t len) 
{
       uint8_t i;
       for (i = 0; i < len; i++) {
  fa:	84 b1       	in	r24, 0x04	; 4
  fc:	83 7c       	andi	r24, 0xC3	; 195
  fe:	84 b9       	out	0x04, r24	; 4
 100:	84 b1       	in	r24, 0x04	; 4
 102:	8c 62       	ori	r24, 0x2C	; 44
 104:	84 b9       	out	0x04, r24	; 4
 106:	81 e5       	ldi	r24, 0x51	; 81
 108:	8c bd       	out	0x2c, r24	; 44
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	8d bd       	out	0x2d, r24	; 45
 10e:	08 95       	ret

00000110 <i2c_start>:
uint8_t i2c_start(uint8_t address)
{
	// I2C example taken  from ATMEGA 2560
	// 1<<TWINT clears the interrupt
	// reset TWI control register
	TWCR = 0;
 110:	ec eb       	ldi	r30, 0xBC	; 188
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 116:	94 ea       	ldi	r25, 0xA4	; 164
 118:	90 83       	st	Z, r25
	// wait for TWINT Flag set.
	while( !(TWCR & (1<<TWINT)) );
 11a:	90 81       	ld	r25, Z
 11c:	99 23       	and	r25, r25
 11e:	ec f7       	brge	.-6      	; 0x11a <i2c_start+0xa>
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 120:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 124:	98 7f       	andi	r25, 0xF8	; 248
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	a1 f4       	brne	.+40     	; 0x152 <i2c_start+0x42>
		
	// load slave address into data register
	TWDR = address;
 12a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 13e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 142:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 144:	98 31       	cpi	r25, 0x18	; 24
 146:	39 f0       	breq	.+14     	; 0x156 <i2c_start+0x46>
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for TWINT Flag set.
	while( !(TWCR & (1<<TWINT)) );
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 34       	cpi	r25, 0x40	; 64
 14c:	29 f4       	brne	.+10     	; 0x158 <i2c_start+0x48>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 95       	ret
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
	
	return 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
}
 158:	08 95       	ret

0000015a <main>:
#define write_eeprom_word(address,value) eeprom_write_word ((uint16_t*)address,(uint16_t)value)
#define update_eeprom_word(address,value) eeprom_update_word ((uint16_t*)address,(uint16_t)value)

	uint8_t EEMEM k[200]; // 512 bytes
	uint16_t EEMEM crc16;
int main(void) {
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	spi_init();
 168:	c8 df       	rcall	.-112    	; 0xfa <spi_init>
	i2c_start(U7_ADDR);
 16a:	82 ed       	ldi	r24, 0xD2	; 210
 16c:	d1 df       	rcall	.-94     	; 0x110 <i2c_start>
	
	// Premade in atmel studio, ccitt update will update its values everytime the data is added.
	// use http://www.sunshine2k.de/coding/javascript/crc/crc_js.html to test CRC
	write_eeprom_word(crc16,0xFFFF);
 16e:	6f ef       	ldi	r22, 0xFF	; 255
 170:	7f ef       	ldi	r23, 0xFF	; 255
 172:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x700000>
 176:	90 91 01 00 	lds	r25, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x700001>
 17a:	42 d0       	rcall	.+132    	; 0x200 <eeprom_write_word>
 17c:	02 e0       	ldi	r16, 0x02	; 2
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	0f 2e       	mov	r0, r31
 182:	f2 e0       	ldi	r31, 0x02	; 2
 184:	ef 2e       	mov	r14, r31
 186:	f2 e0       	ldi	r31, 0x02	; 2
 188:	ff 2e       	mov	r15, r31
 18a:	f0 2d       	mov	r31, r0
 18c:	e8 01       	movw	r28, r16
	
	int i;
	// Fill up the array with 512 times 0xFF
	for (i=0;i<512;i++) write_eeprom_word(&k[i], 0xF0);
 18e:	60 ef       	ldi	r22, 0xF0	; 240
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	ce 01       	movw	r24, r28
 194:	35 d0       	rcall	.+106    	; 0x200 <eeprom_write_word>
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	ec 16       	cp	r14, r28
 19a:	fd 06       	cpc	r15, r29
	// Calculate and update the CRC
	for (i=0;i<512;i++) write_eeprom_word(crc16, _crc_ccitt_update(read_eeprom_word(crc16), read_eeprom_word(&k[i])));
 19c:	c1 f7       	brne	.-16     	; 0x18e <main+0x34>
 19e:	c8 01       	movw	r24, r16
 1a0:	2a d0       	rcall	.+84     	; 0x1f6 <eeprom_read_word>
 1a2:	d8 2e       	mov	r13, r24
 1a4:	c0 91 00 00 	lds	r28, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x700000>
 1a8:	d0 91 01 00 	lds	r29, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x700001>
 1ac:	ce 01       	movw	r24, r28
 1ae:	23 d0       	rcall	.+70     	; 0x1f6 <eeprom_read_word>
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
 1b0:	8d 25       	eor	r24, r13
 1b2:	08 2e       	mov	r0, r24
 1b4:	82 95       	swap	r24
 1b6:	80 7f       	andi	r24, 0xF0	; 240
 1b8:	80 25       	eor	r24, r0
 1ba:	09 2e       	mov	r0, r25
 1bc:	98 2f       	mov	r25, r24
 1be:	82 95       	swap	r24
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	08 26       	eor	r0, r24
 1c4:	86 95       	lsr	r24
 1c6:	98 27       	eor	r25, r24
 1c8:	89 27       	eor	r24, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	88 0f       	add	r24, r24
 1ce:	88 0f       	add	r24, r24
 1d0:	80 25       	eor	r24, r0
 1d2:	bc 01       	movw	r22, r24
 1d4:	ce 01       	movw	r24, r28
 1d6:	14 d0       	rcall	.+40     	; 0x200 <eeprom_write_word>
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	0e 15       	cp	r16, r14
 1de:	1f 05       	cpc	r17, r15
 1e0:	f1 f6       	brne	.-68     	; 0x19e <main+0x44>
	
	
return 0;
}
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	08 95       	ret

000001f6 <eeprom_read_word>:
 1f6:	a8 e1       	ldi	r26, 0x18	; 24
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	42 e0       	ldi	r20, 0x02	; 2
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <eeprom_read_blraw>

00000200 <eeprom_write_word>:
 200:	12 d0       	rcall	.+36     	; 0x226 <eeprom_write_byte>
 202:	27 2f       	mov	r18, r23
 204:	11 c0       	rjmp	.+34     	; 0x228 <eeprom_write_r18>

00000206 <eeprom_read_block>:
 206:	dc 01       	movw	r26, r24
 208:	cb 01       	movw	r24, r22

0000020a <eeprom_read_blraw>:
 20a:	fc 01       	movw	r30, r24
 20c:	f9 99       	sbic	0x1f, 1	; 31
 20e:	fe cf       	rjmp	.-4      	; 0x20c <eeprom_read_blraw+0x2>
 210:	06 c0       	rjmp	.+12     	; 0x21e <eeprom_read_blraw+0x14>
 212:	f2 bd       	out	0x22, r31	; 34
 214:	e1 bd       	out	0x21, r30	; 33
 216:	f8 9a       	sbi	0x1f, 0	; 31
 218:	31 96       	adiw	r30, 0x01	; 1
 21a:	00 b4       	in	r0, 0x20	; 32
 21c:	0d 92       	st	X+, r0
 21e:	41 50       	subi	r20, 0x01	; 1
 220:	50 40       	sbci	r21, 0x00	; 0
 222:	b8 f7       	brcc	.-18     	; 0x212 <eeprom_read_blraw+0x8>
 224:	08 95       	ret

00000226 <eeprom_write_byte>:
 226:	26 2f       	mov	r18, r22

00000228 <eeprom_write_r18>:
 228:	f9 99       	sbic	0x1f, 1	; 31
 22a:	fe cf       	rjmp	.-4      	; 0x228 <eeprom_write_r18>
 22c:	1f ba       	out	0x1f, r1	; 31
 22e:	92 bd       	out	0x22, r25	; 34
 230:	81 bd       	out	0x21, r24	; 33
 232:	20 bd       	out	0x20, r18	; 32
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	fa 9a       	sbi	0x1f, 2	; 31
 23a:	f9 9a       	sbi	0x1f, 1	; 31
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
